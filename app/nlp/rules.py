"""
Motor de regras cl√≠nicas determin√≠sticas - vers√£o simplificada
Regras para diagn√≥sticos, lacunas de informa√ß√£o e condutas
"""

import logging
from typing import List, Dict, Any, Set

from app.models import ClinicalFacts, PanelsState

logger = logging.getLogger(__name__)


class ClinicalRuleEngine:
    """
    Motor de regras cl√≠nicas baseado em Experta
    """
    
    def __init__(self):
        self.diagnoses = []
        self.gaps = []
        self.management = []
    
    def generate_diagnoses(self, facts: ClinicalFacts) -> List[Dict[str, Any]]:
        """
        Gera diagn√≥sticos baseados em regras cl√≠nicas simples
        """
        try:
            diagnoses = []
            
            # Regras respirat√≥rias
            respiratory_symptoms = {"tosse", "falta de ar", "dispneia", "chiado", "catarro"}
            if any(any(r in symptom for r in respiratory_symptoms) for symptom in facts.sintomas):
                has_fever = any("febre" in s for s in facts.sintomas)
                if has_fever:
                    diagnoses.append({
                        "name": "Infec√ß√£o respirat√≥ria",
                        "confidence": 0.85,
                        "reasons": ["Febre presente", "Sintomas respirat√≥rios"]
                    })
                else:
                    diagnoses.append({
                        "name": "S√≠ndrome respirat√≥ria",
                        "confidence": 0.70,
                        "reasons": ["Sintomas respirat√≥rios presentes"]
                    })
            
            # Regras gastrointestinais
            gi_symptoms = {"n√°usea", "v√¥mito", "diarreia", "dor abdominal", "azia"}
            if any(any(g in symptom for g in gi_symptoms) for symptom in facts.sintomas):
                has_fever = any("febre" in s for s in facts.sintomas)
                if has_fever:
                    diagnoses.append({
                        "name": "Gastroenterite",
                        "confidence": 0.80,
                        "reasons": ["Febre presente", "Sintomas gastrointestinais"]
                    })
                else:
                    diagnoses.append({
                        "name": "S√≠ndrome gastrointestinal",
                        "confidence": 0.65,
                        "reasons": ["Sintomas gastrointestinais presentes"]
                    })
            
            # Regras de dor
            pain_symptoms = [s for s in facts.sintomas if "dor" in s]
            if pain_symptoms:
                if any("dor de cabe√ßa" in s or "cefaleia" in s for s in pain_symptoms):
                    diagnoses.append({
                        "name": "Cefaleia prim√°ria",
                        "confidence": 0.70,
                        "reasons": ["Dor de cabe√ßa como sintoma principal"]
                    })
                else:
                    diagnoses.append({
                        "name": "S√≠ndrome dolorosa",
                        "confidence": 0.60,
                        "reasons": [f"Dor localizada: {', '.join(pain_symptoms[:2])}"]
                    })
            
            # Red flags
            if facts.red_flags:
                diagnoses.append({
                    "name": "CONDI√á√ÉO DE EMERG√äNCIA",
                    "confidence": 0.95,
                    "reasons": [f"Red flag presente: {', '.join(facts.red_flags)}"]
                })
            
            # Hipertens√£o
            if any("press√£o alta" in f or "hipertens√£o" in f for f in facts.achados_exame):
                diagnoses.append({
                    "name": "Hipertens√£o arterial",
                    "confidence": 0.90,
                    "reasons": ["Press√£o arterial elevada documentada"]
                })
            
            return diagnoses[:5]  # Top 5
            
        except Exception as e:
            logger.error(f"Erro no motor de diagn√≥sticos: {e}")
            return []
    
    def identify_gaps(self, facts: ClinicalFacts, current_state: PanelsState) -> List[str]:
        """
        Identifica lacunas de informa√ß√£o importantes
        """
        try:
            gaps = []
            
            # Lacunas para dor
            pain_symptoms = [s for s in facts.sintomas if "dor" in s]
            if pain_symptoms:
                gaps.append("Caracterizar a dor: intensidade, dura√ß√£o, fatores de melhora/piora")
            
            # Lacunas para febre
            if any("febre" in s for s in facts.sintomas):
                gaps.append("Investigar: h√° quanto tempo tem febre? Temperatura m√°xima?")
            
            # Sintomas respirat√≥rios
            respiratory_symptoms = {"tosse", "falta de ar", "dispneia", "chiado", "catarro"}
            if any(any(r in symptom for r in respiratory_symptoms) for symptom in facts.sintomas):
                gaps.append("Investigar: presen√ßa de expectora√ß√£o, cor do escarro")
            
            # Sintomas GI
            gi_symptoms = {"n√°usea", "v√¥mito", "diarreia"}
            if any(any(g in symptom for g in gi_symptoms) for symptom in facts.sintomas):
                gaps.append("Avaliar hidrata√ß√£o e caracter√≠sticas das evacua√ß√µes")
            
            # Sinais vitais
            if not facts.achados_exame:
                gaps.append("Verificar sinais vitais completos")
            
            # Medicamentos
            if not facts.medicamentos:
                gaps.append("Investigar medica√ß√µes em uso regular")
            
            # Alergias
            if not facts.alergias:
                gaps.append("Verificar alergias medicamentosas")
            
            return gaps[:6]  # Top 6
            
        except Exception as e:
            logger.error(f"Erro na identifica√ß√£o de lacunas: {e}")
            return []
    
    def suggest_management(self, facts: ClinicalFacts, current_state: PanelsState) -> List[str]:
        """
        Sugere condutas cl√≠nicas baseadas em regras
        """
        try:
            management = []
            
            # Red flags - prioridade m√°xima
            if facts.red_flags:
                management.append("üö® AVALIA√á√ÉO IMEDIATA NECESS√ÅRIA")
                management.append("Considerar encaminhamento para emerg√™ncia")
            
            # Manejo de febre
            if any("febre" in s for s in facts.sintomas):
                management.append("Antit√©rmico se temperatura > 37.8¬∞C")
                management.append("Hidrata√ß√£o adequada")
            
            # Manejo de dor
            if any("dor" in s for s in facts.sintomas):
                management.append("Analgesia conforme intensidade (escala 0-10)")
            
            # Sintomas respirat√≥rios
            respiratory_symptoms = {"tosse", "falta de ar", "dispneia", "chiado", "catarro"}
            if any(any(r in symptom for r in respiratory_symptoms) for symptom in facts.sintomas):
                management.append("Repouso relativo")
                management.append("Hidrata√ß√£o e umidifica√ß√£o do ambiente")
            
            # Sintomas GI
            gi_symptoms = {"n√°usea", "v√¥mito", "diarreia"}
            if any(any(g in symptom for g in gi_symptoms) for symptom in facts.sintomas):
                management.append("Dieta leve e fracionada")
                management.append("Monitorar sinais de desidrata√ß√£o")
            
            # Hipertens√£o
            if any("press√£o alta" in f or "hipertens√£o" in f for f in facts.achados_exame):
                management.append("Controle da press√£o arterial")
                management.append("Orienta√ß√µes diet√©ticas (baixo s√≥dio)")
            
            # Condutas gerais
            if not management or len(management) == 0:
                management.append("Tratamento sintom√°tico")
            
            management.append("Retorno se piora ou persist√™ncia dos sintomas")
            
            return management[:8]  # Top 8
            
        except Exception as e:
            logger.error(f"Erro nas sugest√µes de conduta: {e}")
            return []
    
# Fun√ß√µes auxiliares para testes

def test_rules():
    """
    Teste b√°sico das regras cl√≠nicas
    """
    from app.models import ClinicalFacts
    
    # Criar fatos de teste
    facts = ClinicalFacts(
        sintomas=["dor de cabe√ßa", "febre", "tosse"],
        achados_exame=["press√£o alta"],
        red_flags=["febre alta"]
    )
    
    # Testar motor de regras
    engine = ClinicalRuleEngine()
    
    diagnoses = engine.generate_diagnoses(facts)
    gaps = engine.identify_gaps(facts, PanelsState())
    management = engine.suggest_management(facts, PanelsState())
    
    print("=== Teste do Motor de Regras ===")
    print(f"Diagn√≥sticos: {diagnoses}")
    print(f"Lacunas: {gaps}")
    print(f"Condutas: {management}")


if __name__ == "__main__":
    test_rules()